<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>3D FPS Test</title>
  <link href="https://fonts.googleapis.com/css2?family=Orbitron&display=swap" rel="stylesheet">
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: black;
      font-family: 'Orbitron', sans-serif;
    }
    #fpsCounter {
      position: absolute;
      top: 10px;
      left: 10px;
      font-size: 24px;
      color: white;
      z-index: 2;
    }
    #infoPanel {
      position: absolute;
      top: 50px;
      left: 10px;
      font-size: 16px;
      color: white;
      background: rgba(0, 0, 0, 0.5);
      padding: 10px;
      border-radius: 5px;
      z-index: 2;
      line-height: 1.4;
    }
    #infoPanel h3 {
      margin: 0 0 5px 0;
      font-size: 18px;
    }
    #infoPanel ul {
      list-style-type: none;
      padding-left: 0;
      margin-top: 0;
    }
    #infoPanel li {
      margin: 3px 0;
    }
  </style>
</head>
<body>
  <div id="fpsCounter">FPS: 0</div>
  <div id="infoPanel">
    <h3>WASD Movement Legend</h3>
    <ul>
      <li><strong>W</strong>: Move Forward</li>
      <li><strong>S</strong>: Move Backward</li>
      <li><strong>A</strong>: Move Left</li>
      <li><strong>D</strong>: Move Right</li>
    </ul>
    <p>Remote IP: <span id="ip">Loading...</span></p>
    <p>Ping: <span id="ping">Loading...</span></p>
    <p>Browser Info: <span id="browser"></span></p>
  </div>
  
  <!-- Include Three.js from a CDN -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    // Global variables for Three.js scene.
    let scene, camera, renderer;
    let spaceship;
    let stars;
    const clock = new THREE.Clock();

    // FPS calculation variables.
    let lastFpsUpdate = performance.now();
    let frameCount = 0;
    const fpsDiv = document.getElementById('fpsCounter');

    // Keyboard input handling.
    const keys = {};
    document.addEventListener('keydown', (e) => { keys[e.key.toLowerCase()] = true; });
    document.addEventListener('keyup', (e) => { keys[e.key.toLowerCase()] = false; });

    function init() {
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.set(0, 2, 5);

      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      // Basic lighting.
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
      scene.add(ambientLight);
      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
      directionalLight.position.set(5, 10, 7.5);
      scene.add(directionalLight);

      // Create the spaceship as a cone.
      const spaceshipGeometry = new THREE.ConeGeometry(0.5, 1.5, 16);
      const spaceshipMaterial = new THREE.MeshStandardMaterial({ color: 0x00ffff });
      spaceship = new THREE.Mesh(spaceshipGeometry, spaceshipMaterial);
      // Rotate so the cone tip points along negative Z (forward).
      spaceship.rotation.set(Math.PI / 2, 0, 0);
      scene.add(spaceship);

      // Create a starfield with random colors, sizes, and circular shape via a shader.
      const starCount = 1000;
      const starGeometry = new THREE.BufferGeometry();
      const positions = new Float32Array(starCount * 3);
      const colors = new Float32Array(starCount * 3);
      const sizes = new Float32Array(starCount);
      for (let i = 0; i < starCount; i++) {
        positions[i * 3] = (Math.random() - 0.5) * 100;
        positions[i * 3 + 1] = (Math.random() - 0.5) * 100;
        positions[i * 3 + 2] = -Math.random() * 200;
        // Random RGB colors.
        colors[i * 3] = Math.random();
        colors[i * 3 + 1] = Math.random();
        colors[i * 3 + 2] = Math.random();
        sizes[i] = Math.random() * 4 + 1; // Size between 1 and 5.
      }
      starGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
      starGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
      starGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));

      const starMaterial = new THREE.ShaderMaterial({
        uniforms: {},
        vertexShader: `
          attribute float size;
          attribute vec3 color;
          varying vec3 vColor;
          void main() {
            vColor = color;
            vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
            // Scale point size with distance.
            gl_PointSize = size * (300.0 / -mvPosition.z);
            gl_Position = projectionMatrix * mvPosition;
          }
        `,
        fragmentShader: `
          varying vec3 vColor;
          void main() {
            float d = distance(gl_PointCoord, vec2(0.5));
            if (d > 0.5) discard;
            gl_FragColor = vec4(vColor, 1.0);
          }
        `,
        transparent: true,
        vertexColors: true
      });

      stars = new THREE.Points(starGeometry, starMaterial);
      scene.add(stars);

      window.addEventListener('resize', onWindowResize, false);
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }

    // Update spaceship movement based on WASD keys.
    function updateSpaceship(delta) {
      const speed = 5;
      if (keys['w']) spaceship.position.z -= speed * delta;
      if (keys['s']) spaceship.position.z += speed * delta;
      if (keys['a']) spaceship.position.x -= speed * delta;
      if (keys['d']) spaceship.position.x += speed * delta;
      // Always ensure the spaceship remains oriented forward.
      spaceship.rotation.set(Math.PI / 2, 0, 0);
    }

    // Update the starfield: move stars toward the camera.
    function updateStars(delta) {
      const positions = stars.geometry.attributes.position.array;
      for (let i = 0; i < positions.length; i += 3) {
        positions[i + 2] += 2 * delta; // Move stars forward.
        if (positions[i + 2] > 0) { // If star passes the camera, reset it.
          positions[i + 2] = -200 - Math.random() * 100;
          positions[i] = (Math.random() - 0.5) * 100;
          positions[i + 1] = (Math.random() - 0.5) * 100;
        }
      }
      stars.geometry.attributes.position.needsUpdate = true;
    }

    // Main animation loop.
    function animate() {
      requestAnimationFrame(animate);
      const delta = clock.getDelta();

      updateSpaceship(delta);
      updateStars(delta);

      renderer.render(scene, camera);

      // FPS calculation: update every second.
      frameCount++;
      const now = performance.now();
      if (now - lastFpsUpdate >= 1000) {
        const fps = Math.round((frameCount * 1000) / (now - lastFpsUpdate));
        fpsDiv.innerText = "FPS: " + fps;
        lastFpsUpdate = now;
        frameCount = 0;
      }
    }

    init();
    animate();

    // Display browser info.
    document.getElementById('browser').innerText = navigator.userAgent;

    // Fetch remote IP.
    fetch('https://api.ipify.org?format=json')
      .then(response => response.json())
      .then(data => {
        document.getElementById('ip').innerText = data.ip;
      })
      .catch(error => {
        document.getElementById('ip').innerText = 'Error fetching IP';
        console.error('Error fetching remote IP:', error);
      });

    // Measure ping from browser to server.
    function pingServer() {
      const startTime = performance.now();
      fetch('https://api.ipify.org?format=json', { cache: "no-cache" })
        .then(response => response.json())
        .then(() => {
          const ping = Math.round(performance.now() - startTime);
          document.getElementById('ping').innerText = ping + " ms";
        })
        .catch(error => {
          document.getElementById('ping').innerText = 'Error';
          console.error('Error fetching ping:', error);
        });
    }
    // Ping the server every 5 seconds.
    pingServer();
    setInterval(pingServer, 5000);
  </script>
</body>
</html>
